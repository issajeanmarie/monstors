{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monstor","id","name","email","CardList","monstors","map","SearchBox","handleSearch","type","placeholder","onChange","App","e","setState","searchField","target","value","state","fetch","then","res","json","users","this","filteredMonstors","filter","toLowerCase","includes","toLocaleLowerCase","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAaeA,EAVF,SAAAC,GACT,OACI,sBAAKC,UAAU,OAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,MAC9D,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCQfC,G,MAZE,SAAAR,GACb,OACI,qBAAKC,UAAU,WAAf,SAEQD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,W,MCIxBM,MAVf,YAAoC,IAAhBC,EAAe,EAAfA,aAChB,OACI,uBACEC,KAAK,SACLC,YAAY,oBACZC,SAAUH,KC+BLI,E,kDAjCb,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IAcRY,aAAe,SAAAK,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALE,E,qDASnB,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAO1C,WAAS,IAAD,EAC0BC,KAAKN,MAA9Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYc,wBAClD,OACE,sBAAKhC,UAAU,MAAf,UACE,sDACA,cAAC,EAAD,CAAWW,aAAcgB,KAAKhB,eAC9B,cAAC,EAAD,CAAUH,SAAUoB,W,GA5BVK,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e6c97359.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.component.css'\r\n\r\nconst Card = props => {\r\n    return (\r\n        <div className=\"card\">\r\n            <img alt=\"profile\" src={`https://robohash.org/${props.monstor.id}`} />\r\n            <h2>{props.monstor.name}</h2>\r\n            <p>{props.monstor.email}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport Card from '../card/card.component'\r\nimport './card-list.component.css'\r\n\r\nconst CardList = props => {\r\n    return (\r\n        <div className=\"monstors\">\r\n            {\r\n                props.monstors.map(monstor => \r\n                    <Card key={monstor.id} monstor={monstor}/> \r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList\r\n","import React from 'react'\r\nimport './search-box.css'\r\n\r\nfunction SearchBox({handleSearch}) {\r\n    return (\r\n        <input \r\n          type=\"search\" \r\n          placeholder=\"type to search...\" \r\n          onChange={handleSearch} \r\n        />\r\n    )\r\n}\r\n\r\nexport default SearchBox\r\n","import './App.css';\nimport React from 'react';\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box'\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n      monstors: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(users => this.setState({monstors: users}))\n  }\n\n  handleSearch = e => {\n    this.setState({searchField: e.target.value})\n  }\n  \n  render(){\n    const {monstors, searchField} = this.state\n    const filteredMonstors = monstors.filter(monstor => \n      monstor.name.toLowerCase().includes(searchField.toLocaleLowerCase()))\n    return(\n      <div className=\"App\">\n        <h2>Search for monstors!</h2>\n        <SearchBox handleSearch={this.handleSearch} />\n        <CardList monstors={filteredMonstors} />        \n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}